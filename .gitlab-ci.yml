# Main CI/CD configuration for UniCentral
# Uses a multi-stage approach with separate jobs for backend and frontend

# Default image for pipeline
image: python:3.9-slim

# Enable Docker-in-Docker for container-based testing
services:
  - name: docker:dind

# Pipeline variables
variables:
  # Docker configuration
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  # Django configuration for tests
  DJANGO_SETTINGS_MODULE: uni_central.settings
  # Coverage thresholds for quality checks
  BACKEND_COVERAGE_THRESHOLD: 70
  # Database configuration (in-memory for tests)
  DATABASE_URL: "sqlite://:memory:"
  # Node configuration
  NODE_VERSION: 18

# Define the stages of the pipeline
stages:
  - lint
  - test
  - build
  - deploy

# Cache configurations
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pip
    - node_modules/

# Backend specific configuration
.backend_config: &backend_config
  before_script:
    - apt-get update -y && apt-get install -y gcc docker.io
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install coverage pytest pytest-django pytest-cov

# Frontend specific configuration
.frontend_config: &frontend_config
  image: node:${NODE_VERSION}
  before_script:
    - npm ci

# Backend linting
backend-lint:
  stage: lint
  <<: *backend_config
  script:
    - pip install flake8 black pylint
    - echo "Running flake8 for PEP8 style checking..."
    - flake8 backend/
    - echo "Running black code formatter check..."
    - black --check backend/
    - echo "Running pylint for more in-depth code quality..."
    - pylint --disable=C0111,R0903,C0103 backend/

# Frontend linting
frontend-lint:
  stage: lint
  <<: *frontend_config
  script:
    - npm install -g eslint prettier
    - echo "Running ESLint on frontend code..."
    - eslint frontend/src/ || true  # Don't fail the pipeline yet, just report issues
    - echo "Running Prettier on frontend code..."
    - prettier --check "frontend/src/**/*.{js,jsx}" || true  # Don't fail yet

# Backend tests with coverage
backend-test:
  stage: test
  <<: *backend_config
  script:
    - echo "Running Django tests with coverage..."
    - cd backend/uni_central
    - coverage run --source='.' manage.py test
    - coverage report
    - coverage xml
    - echo "Running pytest for additional test cases..."
    - pytest --cov=uni_central
  artifacts:
    paths:
      - backend/uni_central/coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/uni_central/coverage.xml

# Frontend tests
frontend-test:
  stage: test
  <<: *frontend_config
  script:
    - echo "Installing frontend test dependencies..."
    - npm install --save-dev jest @testing-library/react @testing-library/jest-dom
    - echo "Running React component tests..."
    - npm test || echo "No tests found or tests failing. Please add tests to your frontend code."
  artifacts:
    paths:
      - frontend/coverage/
    reports:
      junit: frontend/junit.xml

# Database migrations check
migration-test:
  stage: test
  <<: *backend_config
  script:
    - cd backend/uni_central
    - echo "Checking for migration conflicts..."
    - python manage.py makemigrations --check --dry-run
    - echo "Validating models..."
    - python manage.py check
    - echo "Testing migrations..."
    - python manage.py migrate --plan

# Security scanning
security-scan:
  stage: test
  <<: *backend_config
  script:
    - pip install bandit safety
    - echo "Running Bandit security scanner..."
    - bandit -r backend/ -x backend/uni_central/tests/
    - echo "Checking dependencies for security vulnerabilities..."
    - safety check

# Build frontend assets
build-frontend:
  stage: build
  <<: *frontend_config
  script:
    - echo "Building frontend assets..."
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

# Build backend
build-backend:
  stage: build
  <<: *backend_config
  script:
    - echo "Collecting static files..."
    - cd backend/uni_central
    - python manage.py collectstatic --noinput
    - echo "Running database migrations..."
    - python manage.py migrate --noinput
  artifacts:
    paths:
      - backend/uni_central/staticfiles/
    expire_in: 1 week

# Deploy to staging
deploy-staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl bash
  script:
    - echo "Deploying to staging environment..."
    - echo "This would trigger your AWS deployment script or use AWS CLI to deploy"
  environment:
    name: staging
  only:
    - main
  when: manual

# Deploy to production
deploy-production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl bash
  script:
    - echo "Deploying to production environment..."
    - echo "This would trigger your AWS production deployment"
  environment:
    name: production
  only:
    - tags
  when: manual