# Main CI/CD configuration for UniCentral
# Updated to match the correct project structure and Vercel deployment

# Default image for pipeline
image: python:3.11-slim

# Pipeline variables
variables:
  # Django configuration for tests
  DJANGO_SETTINGS_MODULE: uni_central.settings
  # Coverage thresholds for quality checks
  BACKEND_COVERAGE_THRESHOLD: 70
  # Database configuration (in-memory for tests)
  DATABASE_URL: "sqlite://:memory:"
  # Node configuration
  NODE_VERSION: 18
  # Content moderation
  PERSPECTIVE_API_KEY: ${PERSPECTIVE_API_KEY}

# Define the stages of the pipeline
stages:
  - lint
  - test
  - build
  - deploy

# Cache configurations
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pip
    - node_modules/

# Backend specific configuration
.backend_config: &backend_config
  before_script:
    - apt-get update -y && apt-get install -y gcc
    - pip install --upgrade pip
    - cd backend/uni_central
    - pip install -r requirements.txt || pip install django djangorestframework pytesseract pdf2image pillow fuzzywuzzy
    - pip install coverage pytest pytest-django pytest-cov
    - if command -v apk >/dev/null 2>&1; then
        apk add --no-cache openssh-client bash git;
      else
        # macOS already has these tools
        echo "Running on macOS, skipping package installation";
      fi

# Backend linting
backend-lint:
  stage: lint
  <<: *backend_config
  script:
    - pip install flake8 pycodestyle
    - echo "Running flake8 for PEP8 style checking..."
    - flake8 uni_central/ --count --select=E9,F63,F7,F82 --show-source --statistics
  allow_failure: true

# Backend tests with coverage
backend-test:
  stage: test
  <<: *backend_config
  script:
    - echo "Running Django tests with coverage..."
    - coverage run --source='uni_central' manage.py test uni_central.tests
    - coverage report
    - coverage xml
  artifacts:
    paths:
      - backend/uni_central/coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/uni_central/coverage.xml
  allow_failure: true

# Database migrations check
migration-test:
  stage: test
  <<: *backend_config
  script:
    - echo "Checking for migration conflicts..."
    - python manage.py makemigrations --check --dry-run
    - echo "Validating models..."
    - python manage.py check
    - echo "Testing migrations..."
    - python manage.py migrate --plan
  allow_failure: true

# Security scanning
security-scan:
  stage: test
  <<: *backend_config
  script:
    - pip install bandit safety
    - echo "Running Bandit security scanner..."
    - bandit -r uni_central/ -x uni_central/tests/
    - echo "Checking dependencies for security vulnerabilities..."
    - safety check
  allow_failure: true

# Build backend
build-backend:
  stage: build
  <<: *backend_config
  script:
    - echo "Collecting static files..."
    - python manage.py collectstatic --noinput
  artifacts:
    paths:
      - backend/uni_central/staticfiles/
    expire_in: 1 week

# Deploy to existing EC2 instance
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash git
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - echo "Deploying to EC2 environment..."
    # SSH into the server and pull the latest changes
    - ssh ${EC2_USER}@${EC2_HOST} "cd ${APP_PATH} && git pull origin ${CI_COMMIT_REF_NAME} && source ${VENV_PATH}/bin/activate && pip install -r requirements.txt && cd ${DJANGO_PATH} && python manage.py migrate && python manage.py collectstatic --noinput && ${RESTART_COMMAND}"
  environment:
    name: production
    url: https://uni-central.com
  only:
    - main
    - content-moderation
  variables:
    EC2_HOST: "${EC2_HOST}"
    EC2_USER: "${EC2_USER}"
    APP_PATH: "${APP_PATH}"
    VENV_PATH: "${VENV_PATH}"
    DJANGO_PATH: "${DJANGO_PATH}"
    RESTART_COMMAND: "${RESTART_COMMAND}"